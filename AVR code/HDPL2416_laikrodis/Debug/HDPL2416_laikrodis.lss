
HDPL2416_laikrodis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000bce  00000c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000c62  2**0
                  ALLOC
  3 .stab         00001638  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000067a  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002916  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00002945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000303  00000000  00000000  0000298d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000145  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000028b  00000000  00000000  00002dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000210  00000000  00000000  00003060  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000175  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004c7  00000000  00000000  000033e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_1>
   8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 26 04 	call	0x84c	; 0x84c <main>
  74:	0c 94 e5 05 	jmp	0xbca	; 0xbca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_4>:
uint8_t hours = 0;

uint8_t dispIsOn;

ISR(TIMER2_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	00 90 5f 00 	lds	r0, 0x005F
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	2f 93       	push	r18
  92:	3f 93       	push	r19
  94:	4f 93       	push	r20
  96:	5f 93       	push	r21
  98:	6f 93       	push	r22
  9a:	7f 93       	push	r23
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	time_s+=8;
  b0:	80 91 60 00 	lds	r24, 0x0060
  b4:	90 91 61 00 	lds	r25, 0x0061
  b8:	a0 91 62 00 	lds	r26, 0x0062
  bc:	b0 91 63 00 	lds	r27, 0x0063
  c0:	08 96       	adiw	r24, 0x08	; 8
  c2:	a1 1d       	adc	r26, r1
  c4:	b1 1d       	adc	r27, r1
  c6:	80 93 60 00 	sts	0x0060, r24
  ca:	90 93 61 00 	sts	0x0061, r25
  ce:	a0 93 62 00 	sts	0x0062, r26
  d2:	b0 93 63 00 	sts	0x0063, r27
	//time_s += 1;
	if(time_s >= 86400)
  d6:	80 91 60 00 	lds	r24, 0x0060
  da:	90 91 61 00 	lds	r25, 0x0061
  de:	a0 91 62 00 	lds	r26, 0x0062
  e2:	b0 91 63 00 	lds	r27, 0x0063
  e6:	80 38       	cpi	r24, 0x80	; 128
  e8:	01 e5       	ldi	r16, 0x51	; 81
  ea:	90 07       	cpc	r25, r16
  ec:	01 e0       	ldi	r16, 0x01	; 1
  ee:	a0 07       	cpc	r26, r16
  f0:	b1 05       	cpc	r27, r1
  f2:	40 f0       	brcs	.+16     	; 0x104 <__vector_4+0x88>
	time_s = 0;
  f4:	10 92 60 00 	sts	0x0060, r1
  f8:	10 92 61 00 	sts	0x0061, r1
  fc:	10 92 62 00 	sts	0x0062, r1
 100:	10 92 63 00 	sts	0x0063, r1
	
	if(time_s - TimeStamp <= 16)
 104:	20 91 60 00 	lds	r18, 0x0060
 108:	30 91 61 00 	lds	r19, 0x0061
 10c:	40 91 62 00 	lds	r20, 0x0062
 110:	50 91 63 00 	lds	r21, 0x0063
 114:	80 91 64 00 	lds	r24, 0x0064
 118:	90 91 65 00 	lds	r25, 0x0065
 11c:	a0 91 66 00 	lds	r26, 0x0066
 120:	b0 91 67 00 	lds	r27, 0x0067
 124:	79 01       	movw	r14, r18
 126:	8a 01       	movw	r16, r20
 128:	e8 1a       	sub	r14, r24
 12a:	f9 0a       	sbc	r15, r25
 12c:	0a 0b       	sbc	r16, r26
 12e:	1b 0b       	sbc	r17, r27
 130:	d8 01       	movw	r26, r16
 132:	c7 01       	movw	r24, r14
 134:	81 31       	cpi	r24, 0x11	; 17
 136:	91 05       	cpc	r25, r1
 138:	a1 05       	cpc	r26, r1
 13a:	b1 05       	cpc	r27, r1
 13c:	68 f4       	brcc	.+26     	; 0x158 <__vector_4+0xdc>
	{
		UpdateDisplay(time_s);
 13e:	80 91 60 00 	lds	r24, 0x0060
 142:	90 91 61 00 	lds	r25, 0x0061
 146:	a0 91 62 00 	lds	r26, 0x0062
 14a:	b0 91 63 00 	lds	r27, 0x0063
 14e:	bc 01       	movw	r22, r24
 150:	cd 01       	movw	r24, r26
 152:	0e 94 59 03 	call	0x6b2	; 0x6b2 <UpdateDisplay>
 156:	16 c0       	rjmp	.+44     	; 0x184 <__vector_4+0x108>
	}
	else
	{
		
		PORTD&=~BLANK_DISPLAY;
 158:	82 e3       	ldi	r24, 0x32	; 50
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	22 e3       	ldi	r18, 0x32	; 50
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	f9 01       	movw	r30, r18
 162:	20 81       	ld	r18, Z
 164:	2f 77       	andi	r18, 0x7F	; 127
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
		//PORTD&=~DISPLAY_POWER;

		cli();
 16a:	f8 94       	cli
		sleep_enable();
 16c:	85 e5       	ldi	r24, 0x55	; 85
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	25 e5       	ldi	r18, 0x55	; 85
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	20 64       	ori	r18, 0x40	; 64
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
		sei();
 17e:	78 94       	sei
		dispIsOn = 0;
 180:	10 92 6a 00 	sts	0x006A, r1
		
	}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	0f 90       	pop	r0
 1aa:	00 92 5f 00 	sts	0x005F, r0
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_1>:

//Prideti valanda
ISR(INT0_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	00 90 5f 00 	lds	r0, 0x005F
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	2e 97       	sbiw	r28, 0x0e	; 14
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	cd bf       	out	0x3d, r28	; 61
	if(dispIsOn == 1)
 1ea:	80 91 6a 00 	lds	r24, 0x006A
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	59 f5       	brne	.+86     	; 0x248 <__vector_1+0x94>
	{
		time_s += (60*60);
 1f2:	80 91 60 00 	lds	r24, 0x0060
 1f6:	90 91 61 00 	lds	r25, 0x0061
 1fa:	a0 91 62 00 	lds	r26, 0x0062
 1fe:	b0 91 63 00 	lds	r27, 0x0063
 202:	80 5f       	subi	r24, 0xF0	; 240
 204:	91 4f       	sbci	r25, 0xF1	; 241
 206:	af 4f       	sbci	r26, 0xFF	; 255
 208:	bf 4f       	sbci	r27, 0xFF	; 255
 20a:	80 93 60 00 	sts	0x0060, r24
 20e:	90 93 61 00 	sts	0x0061, r25
 212:	a0 93 62 00 	sts	0x0062, r26
 216:	b0 93 63 00 	sts	0x0063, r27
		if(time_s >= 86400)
 21a:	80 91 60 00 	lds	r24, 0x0060
 21e:	90 91 61 00 	lds	r25, 0x0061
 222:	a0 91 62 00 	lds	r26, 0x0062
 226:	b0 91 63 00 	lds	r27, 0x0063
 22a:	80 38       	cpi	r24, 0x80	; 128
 22c:	21 e5       	ldi	r18, 0x51	; 81
 22e:	92 07       	cpc	r25, r18
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	a2 07       	cpc	r26, r18
 234:	b1 05       	cpc	r27, r1
 236:	40 f0       	brcs	.+16     	; 0x248 <__vector_1+0x94>
		time_s = 0;
 238:	10 92 60 00 	sts	0x0060, r1
 23c:	10 92 61 00 	sts	0x0061, r1
 240:	10 92 62 00 	sts	0x0062, r1
 244:	10 92 63 00 	sts	0x0063, r1
	}
	TimeStamp = time_s;
 248:	80 91 60 00 	lds	r24, 0x0060
 24c:	90 91 61 00 	lds	r25, 0x0061
 250:	a0 91 62 00 	lds	r26, 0x0062
 254:	b0 91 63 00 	lds	r27, 0x0063
 258:	80 93 64 00 	sts	0x0064, r24
 25c:	90 93 65 00 	sts	0x0065, r25
 260:	a0 93 66 00 	sts	0x0066, r26
 264:	b0 93 67 00 	sts	0x0067, r27
	PORTD |= DISPLAY_POWER;
 268:	82 e3       	ldi	r24, 0x32	; 50
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	22 e3       	ldi	r18, 0x32	; 50
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	f9 01       	movw	r30, r18
 272:	20 81       	ld	r18, Z
 274:	23 67       	ori	r18, 0x73	; 115
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
	PORTD |= BLANK_DISPLAY;
 27a:	82 e3       	ldi	r24, 0x32	; 50
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	22 e3       	ldi	r18, 0x32	; 50
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	20 68       	ori	r18, 0x80	; 128
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
	UpdateDisplay(time_s);
 28c:	80 91 60 00 	lds	r24, 0x0060
 290:	90 91 61 00 	lds	r25, 0x0061
 294:	a0 91 62 00 	lds	r26, 0x0062
 298:	b0 91 63 00 	lds	r27, 0x0063
 29c:	bc 01       	movw	r22, r24
 29e:	cd 01       	movw	r24, r26
 2a0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <UpdateDisplay>
	
	if(dispIsOn == 0)
 2a4:	80 91 6a 00 	lds	r24, 0x006A
 2a8:	88 23       	and	r24, r24
 2aa:	09 f0       	breq	.+2      	; 0x2ae <__vector_1+0xfa>
 2ac:	78 c0       	rjmp	.+240    	; 0x39e <__vector_1+0x1ea>
	{
		cli();
 2ae:	f8 94       	cli
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	aa ef       	ldi	r26, 0xFA	; 250
 2b6:	b4 e4       	ldi	r27, 0x44	; 68
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	9a 83       	std	Y+2, r25	; 0x02
 2bc:	ab 83       	std	Y+3, r26	; 0x03
 2be:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 2c0:	2f e6       	ldi	r18, 0x6F	; 111
 2c2:	32 e1       	ldi	r19, 0x12	; 18
 2c4:	43 e0       	ldi	r20, 0x03	; 3
 2c6:	51 e4       	ldi	r21, 0x41	; 65
 2c8:	69 81       	ldd	r22, Y+1	; 0x01
 2ca:	7a 81       	ldd	r23, Y+2	; 0x02
 2cc:	8b 81       	ldd	r24, Y+3	; 0x03
 2ce:	9c 81       	ldd	r25, Y+4	; 0x04
 2d0:	0e 94 38 05 	call	0xa70	; 0xa70 <__mulsf3>
 2d4:	dc 01       	movw	r26, r24
 2d6:	cb 01       	movw	r24, r22
 2d8:	8d 83       	std	Y+5, r24	; 0x05
 2da:	9e 83       	std	Y+6, r25	; 0x06
 2dc:	af 83       	std	Y+7, r26	; 0x07
 2de:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e8       	ldi	r20, 0x80	; 128
 2e6:	5f e3       	ldi	r21, 0x3F	; 63
 2e8:	6d 81       	ldd	r22, Y+5	; 0x05
 2ea:	7e 81       	ldd	r23, Y+6	; 0x06
 2ec:	8f 81       	ldd	r24, Y+7	; 0x07
 2ee:	98 85       	ldd	r25, Y+8	; 0x08
 2f0:	0e 94 b7 04 	call	0x96e	; 0x96e <__cmpsf2>
 2f4:	88 23       	and	r24, r24
 2f6:	2c f4       	brge	.+10     	; 0x302 <__vector_1+0x14e>
		__ticks = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	9a 87       	std	Y+10, r25	; 0x0a
 2fe:	89 87       	std	Y+9, r24	; 0x09
 300:	40 c0       	rjmp	.+128    	; 0x382 <__vector_1+0x1ce>
	else if (__tmp > 65535)
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	3f ef       	ldi	r19, 0xFF	; 255
 306:	4f e7       	ldi	r20, 0x7F	; 127
 308:	57 e4       	ldi	r21, 0x47	; 71
 30a:	6d 81       	ldd	r22, Y+5	; 0x05
 30c:	7e 81       	ldd	r23, Y+6	; 0x06
 30e:	8f 81       	ldd	r24, Y+7	; 0x07
 310:	98 85       	ldd	r25, Y+8	; 0x08
 312:	0e 94 34 05 	call	0xa68	; 0xa68 <__gesf2>
 316:	18 16       	cp	r1, r24
 318:	54 f5       	brge	.+84     	; 0x36e <__vector_1+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e2       	ldi	r20, 0x20	; 32
 320:	51 e4       	ldi	r21, 0x41	; 65
 322:	69 81       	ldd	r22, Y+1	; 0x01
 324:	7a 81       	ldd	r23, Y+2	; 0x02
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	9c 81       	ldd	r25, Y+4	; 0x04
 32a:	0e 94 38 05 	call	0xa70	; 0xa70 <__mulsf3>
 32e:	dc 01       	movw	r26, r24
 330:	cb 01       	movw	r24, r22
 332:	bc 01       	movw	r22, r24
 334:	cd 01       	movw	r24, r26
 336:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	9a 87       	std	Y+10, r25	; 0x0a
 340:	89 87       	std	Y+9, r24	; 0x09
 342:	10 c0       	rjmp	.+32     	; 0x364 <__vector_1+0x1b0>
 344:	1c 86       	std	Y+12, r1	; 0x0c
 346:	1b 86       	std	Y+11, r1	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 348:	8b 85       	ldd	r24, Y+11	; 0x0b
 34a:	9c 85       	ldd	r25, Y+12	; 0x0c
 34c:	8c 01       	movw	r16, r24
 34e:	c8 01       	movw	r24, r16
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <__vector_1+0x19c>
 354:	8c 01       	movw	r16, r24
 356:	1c 87       	std	Y+12, r17	; 0x0c
 358:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35a:	89 85       	ldd	r24, Y+9	; 0x09
 35c:	9a 85       	ldd	r25, Y+10	; 0x0a
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	9a 87       	std	Y+10, r25	; 0x0a
 362:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 364:	89 85       	ldd	r24, Y+9	; 0x09
 366:	9a 85       	ldd	r25, Y+10	; 0x0a
 368:	00 97       	sbiw	r24, 0x00	; 0
 36a:	61 f7       	brne	.-40     	; 0x344 <__vector_1+0x190>
 36c:	17 c0       	rjmp	.+46     	; 0x39c <__vector_1+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 36e:	6d 81       	ldd	r22, Y+5	; 0x05
 370:	7e 81       	ldd	r23, Y+6	; 0x06
 372:	8f 81       	ldd	r24, Y+7	; 0x07
 374:	98 85       	ldd	r25, Y+8	; 0x08
 376:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 37a:	dc 01       	movw	r26, r24
 37c:	cb 01       	movw	r24, r22
 37e:	9a 87       	std	Y+10, r25	; 0x0a
 380:	89 87       	std	Y+9, r24	; 0x09
 382:	89 85       	ldd	r24, Y+9	; 0x09
 384:	9a 85       	ldd	r25, Y+10	; 0x0a
 386:	9e 87       	std	Y+14, r25	; 0x0e
 388:	8d 87       	std	Y+13, r24	; 0x0d
 38a:	8d 85       	ldd	r24, Y+13	; 0x0d
 38c:	9e 85       	ldd	r25, Y+14	; 0x0e
 38e:	8c 01       	movw	r16, r24
 390:	f8 01       	movw	r30, r16
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <__vector_1+0x1de>
 396:	8f 01       	movw	r16, r30
 398:	1e 87       	std	Y+14, r17	; 0x0e
 39a:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(2000);
		sei();
 39c:	78 94       	sei
	}
	dispIsOn = 1;
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 6a 00 	sts	0x006A, r24
}
 3a4:	2e 96       	adiw	r28, 0x0e	; 14
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	0f 90       	pop	r0
 3d2:	00 92 5f 00 	sts	0x005F, r0
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__vector_2>:

//Prideti minute
ISR(INT1_vect)
{
 3dc:	1f 92       	push	r1
 3de:	0f 92       	push	r0
 3e0:	00 90 5f 00 	lds	r0, 0x005F
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	2e 97       	sbiw	r28, 0x0e	; 14
 40e:	de bf       	out	0x3e, r29	; 62
 410:	cd bf       	out	0x3d, r28	; 61
	if(dispIsOn == 1)
 412:	80 91 6a 00 	lds	r24, 0x006A
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	51 f5       	brne	.+84     	; 0x46e <__stack+0xf>
	{
		time_s += 60;
 41a:	80 91 60 00 	lds	r24, 0x0060
 41e:	90 91 61 00 	lds	r25, 0x0061
 422:	a0 91 62 00 	lds	r26, 0x0062
 426:	b0 91 63 00 	lds	r27, 0x0063
 42a:	cc 96       	adiw	r24, 0x3c	; 60
 42c:	a1 1d       	adc	r26, r1
 42e:	b1 1d       	adc	r27, r1
 430:	80 93 60 00 	sts	0x0060, r24
 434:	90 93 61 00 	sts	0x0061, r25
 438:	a0 93 62 00 	sts	0x0062, r26
 43c:	b0 93 63 00 	sts	0x0063, r27
		if(time_s >= 86400)
 440:	80 91 60 00 	lds	r24, 0x0060
 444:	90 91 61 00 	lds	r25, 0x0061
 448:	a0 91 62 00 	lds	r26, 0x0062
 44c:	b0 91 63 00 	lds	r27, 0x0063
 450:	80 38       	cpi	r24, 0x80	; 128
 452:	21 e5       	ldi	r18, 0x51	; 81
 454:	92 07       	cpc	r25, r18
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	a2 07       	cpc	r26, r18
 45a:	b1 05       	cpc	r27, r1
 45c:	40 f0       	brcs	.+16     	; 0x46e <__stack+0xf>
		time_s = 0;
 45e:	10 92 60 00 	sts	0x0060, r1
 462:	10 92 61 00 	sts	0x0061, r1
 466:	10 92 62 00 	sts	0x0062, r1
 46a:	10 92 63 00 	sts	0x0063, r1
	}
	TimeStamp = time_s;
 46e:	80 91 60 00 	lds	r24, 0x0060
 472:	90 91 61 00 	lds	r25, 0x0061
 476:	a0 91 62 00 	lds	r26, 0x0062
 47a:	b0 91 63 00 	lds	r27, 0x0063
 47e:	80 93 64 00 	sts	0x0064, r24
 482:	90 93 65 00 	sts	0x0065, r25
 486:	a0 93 66 00 	sts	0x0066, r26
 48a:	b0 93 67 00 	sts	0x0067, r27
	PORTD |= DISPLAY_POWER;
 48e:	82 e3       	ldi	r24, 0x32	; 50
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	22 e3       	ldi	r18, 0x32	; 50
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	f9 01       	movw	r30, r18
 498:	20 81       	ld	r18, Z
 49a:	23 67       	ori	r18, 0x73	; 115
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18
	PORTD |= BLANK_DISPLAY;
 4a0:	82 e3       	ldi	r24, 0x32	; 50
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	22 e3       	ldi	r18, 0x32	; 50
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	f9 01       	movw	r30, r18
 4aa:	20 81       	ld	r18, Z
 4ac:	20 68       	ori	r18, 0x80	; 128
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
	UpdateDisplay(time_s);
 4b2:	80 91 60 00 	lds	r24, 0x0060
 4b6:	90 91 61 00 	lds	r25, 0x0061
 4ba:	a0 91 62 00 	lds	r26, 0x0062
 4be:	b0 91 63 00 	lds	r27, 0x0063
 4c2:	bc 01       	movw	r22, r24
 4c4:	cd 01       	movw	r24, r26
 4c6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <UpdateDisplay>
	
	if(dispIsOn == 0)
 4ca:	80 91 6a 00 	lds	r24, 0x006A
 4ce:	88 23       	and	r24, r24
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <__stack+0x75>
 4d2:	78 c0       	rjmp	.+240    	; 0x5c4 <__stack+0x165>
	{
		cli();
 4d4:	f8 94       	cli
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	aa ef       	ldi	r26, 0xFA	; 250
 4dc:	b4 e4       	ldi	r27, 0x44	; 68
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	9a 83       	std	Y+2, r25	; 0x02
 4e2:	ab 83       	std	Y+3, r26	; 0x03
 4e4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 4e6:	2f e6       	ldi	r18, 0x6F	; 111
 4e8:	32 e1       	ldi	r19, 0x12	; 18
 4ea:	43 e0       	ldi	r20, 0x03	; 3
 4ec:	51 e4       	ldi	r21, 0x41	; 65
 4ee:	69 81       	ldd	r22, Y+1	; 0x01
 4f0:	7a 81       	ldd	r23, Y+2	; 0x02
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	9c 81       	ldd	r25, Y+4	; 0x04
 4f6:	0e 94 38 05 	call	0xa70	; 0xa70 <__mulsf3>
 4fa:	dc 01       	movw	r26, r24
 4fc:	cb 01       	movw	r24, r22
 4fe:	8d 83       	std	Y+5, r24	; 0x05
 500:	9e 83       	std	Y+6, r25	; 0x06
 502:	af 83       	std	Y+7, r26	; 0x07
 504:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e8       	ldi	r20, 0x80	; 128
 50c:	5f e3       	ldi	r21, 0x3F	; 63
 50e:	6d 81       	ldd	r22, Y+5	; 0x05
 510:	7e 81       	ldd	r23, Y+6	; 0x06
 512:	8f 81       	ldd	r24, Y+7	; 0x07
 514:	98 85       	ldd	r25, Y+8	; 0x08
 516:	0e 94 b7 04 	call	0x96e	; 0x96e <__cmpsf2>
 51a:	88 23       	and	r24, r24
 51c:	2c f4       	brge	.+10     	; 0x528 <__stack+0xc9>
		__ticks = 1;
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	9a 87       	std	Y+10, r25	; 0x0a
 524:	89 87       	std	Y+9, r24	; 0x09
 526:	40 c0       	rjmp	.+128    	; 0x5a8 <__stack+0x149>
	else if (__tmp > 65535)
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	3f ef       	ldi	r19, 0xFF	; 255
 52c:	4f e7       	ldi	r20, 0x7F	; 127
 52e:	57 e4       	ldi	r21, 0x47	; 71
 530:	6d 81       	ldd	r22, Y+5	; 0x05
 532:	7e 81       	ldd	r23, Y+6	; 0x06
 534:	8f 81       	ldd	r24, Y+7	; 0x07
 536:	98 85       	ldd	r25, Y+8	; 0x08
 538:	0e 94 34 05 	call	0xa68	; 0xa68 <__gesf2>
 53c:	18 16       	cp	r1, r24
 53e:	54 f5       	brge	.+84     	; 0x594 <__stack+0x135>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 540:	20 e0       	ldi	r18, 0x00	; 0
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	40 e2       	ldi	r20, 0x20	; 32
 546:	51 e4       	ldi	r21, 0x41	; 65
 548:	69 81       	ldd	r22, Y+1	; 0x01
 54a:	7a 81       	ldd	r23, Y+2	; 0x02
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	9c 81       	ldd	r25, Y+4	; 0x04
 550:	0e 94 38 05 	call	0xa70	; 0xa70 <__mulsf3>
 554:	dc 01       	movw	r26, r24
 556:	cb 01       	movw	r24, r22
 558:	bc 01       	movw	r22, r24
 55a:	cd 01       	movw	r24, r26
 55c:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 560:	dc 01       	movw	r26, r24
 562:	cb 01       	movw	r24, r22
 564:	9a 87       	std	Y+10, r25	; 0x0a
 566:	89 87       	std	Y+9, r24	; 0x09
 568:	10 c0       	rjmp	.+32     	; 0x58a <__stack+0x12b>
 56a:	1c 86       	std	Y+12, r1	; 0x0c
 56c:	1b 86       	std	Y+11, r1	; 0x0b
 56e:	8b 85       	ldd	r24, Y+11	; 0x0b
 570:	9c 85       	ldd	r25, Y+12	; 0x0c
 572:	8c 01       	movw	r16, r24
 574:	c8 01       	movw	r24, r16
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <__stack+0x117>
 57a:	8c 01       	movw	r16, r24
 57c:	1c 87       	std	Y+12, r17	; 0x0c
 57e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 580:	89 85       	ldd	r24, Y+9	; 0x09
 582:	9a 85       	ldd	r25, Y+10	; 0x0a
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	9a 87       	std	Y+10, r25	; 0x0a
 588:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 58a:	89 85       	ldd	r24, Y+9	; 0x09
 58c:	9a 85       	ldd	r25, Y+10	; 0x0a
 58e:	00 97       	sbiw	r24, 0x00	; 0
 590:	61 f7       	brne	.-40     	; 0x56a <__stack+0x10b>
 592:	17 c0       	rjmp	.+46     	; 0x5c2 <__stack+0x163>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 594:	6d 81       	ldd	r22, Y+5	; 0x05
 596:	7e 81       	ldd	r23, Y+6	; 0x06
 598:	8f 81       	ldd	r24, Y+7	; 0x07
 59a:	98 85       	ldd	r25, Y+8	; 0x08
 59c:	0e 94 bb 04 	call	0x976	; 0x976 <__fixunssfsi>
 5a0:	dc 01       	movw	r26, r24
 5a2:	cb 01       	movw	r24, r22
 5a4:	9a 87       	std	Y+10, r25	; 0x0a
 5a6:	89 87       	std	Y+9, r24	; 0x09
 5a8:	89 85       	ldd	r24, Y+9	; 0x09
 5aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ac:	9e 87       	std	Y+14, r25	; 0x0e
 5ae:	8d 87       	std	Y+13, r24	; 0x0d
 5b0:	8d 85       	ldd	r24, Y+13	; 0x0d
 5b2:	9e 85       	ldd	r25, Y+14	; 0x0e
 5b4:	8c 01       	movw	r16, r24
 5b6:	f8 01       	movw	r30, r16
 5b8:	31 97       	sbiw	r30, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <__stack+0x159>
 5bc:	8f 01       	movw	r16, r30
 5be:	1e 87       	std	Y+14, r17	; 0x0e
 5c0:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(2000);
		sei();
 5c2:	78 94       	sei
	}
	dispIsOn = 1;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 6a 00 	sts	0x006A, r24
}
 5ca:	2e 96       	adiw	r28, 0x0e	; 14
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	7f 91       	pop	r23
 5e8:	6f 91       	pop	r22
 5ea:	5f 91       	pop	r21
 5ec:	4f 91       	pop	r20
 5ee:	3f 91       	pop	r19
 5f0:	2f 91       	pop	r18
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	0f 90       	pop	r0
 5f8:	00 92 5f 00 	sts	0x005F, r0
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <__vector_18>:

//Ijungti displeju
ISR(INT2_vect)
{
 602:	1f 92       	push	r1
 604:	0f 92       	push	r0
 606:	00 90 5f 00 	lds	r0, 0x005F
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	2f 93       	push	r18
 610:	3f 93       	push	r19
 612:	4f 93       	push	r20
 614:	5f 93       	push	r21
 616:	6f 93       	push	r22
 618:	7f 93       	push	r23
 61a:	8f 93       	push	r24
 61c:	9f 93       	push	r25
 61e:	af 93       	push	r26
 620:	bf 93       	push	r27
 622:	ef 93       	push	r30
 624:	ff 93       	push	r31
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
	TimeStamp = time_s;
 62e:	80 91 60 00 	lds	r24, 0x0060
 632:	90 91 61 00 	lds	r25, 0x0061
 636:	a0 91 62 00 	lds	r26, 0x0062
 63a:	b0 91 63 00 	lds	r27, 0x0063
 63e:	80 93 64 00 	sts	0x0064, r24
 642:	90 93 65 00 	sts	0x0065, r25
 646:	a0 93 66 00 	sts	0x0066, r26
 64a:	b0 93 67 00 	sts	0x0067, r27
	PORTD |= DISPLAY_POWER;
 64e:	82 e3       	ldi	r24, 0x32	; 50
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	22 e3       	ldi	r18, 0x32	; 50
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	f9 01       	movw	r30, r18
 658:	20 81       	ld	r18, Z
 65a:	23 67       	ori	r18, 0x73	; 115
 65c:	fc 01       	movw	r30, r24
 65e:	20 83       	st	Z, r18
	PORTD|=BLANK_DISPLAY;
 660:	82 e3       	ldi	r24, 0x32	; 50
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	22 e3       	ldi	r18, 0x32	; 50
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	f9 01       	movw	r30, r18
 66a:	20 81       	ld	r18, Z
 66c:	20 68       	ori	r18, 0x80	; 128
 66e:	fc 01       	movw	r30, r24
 670:	20 83       	st	Z, r18
	UpdateDisplay(time_s);
 672:	80 91 60 00 	lds	r24, 0x0060
 676:	90 91 61 00 	lds	r25, 0x0061
 67a:	a0 91 62 00 	lds	r26, 0x0062
 67e:	b0 91 63 00 	lds	r27, 0x0063
 682:	bc 01       	movw	r22, r24
 684:	cd 01       	movw	r24, r26
 686:	0e 94 59 03 	call	0x6b2	; 0x6b2 <UpdateDisplay>
}
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	00 92 5f 00 	sts	0x005F, r0
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <UpdateDisplay>:

void UpdateDisplay(uint32_t seconds)
{
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <UpdateDisplay+0x6>
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <UpdateDisplay+0x8>
 6ba:	1f 92       	push	r1
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	6a 83       	std	Y+2, r22	; 0x02
 6c2:	7b 83       	std	Y+3, r23	; 0x03
 6c4:	8c 83       	std	Y+4, r24	; 0x04
 6c6:	9d 83       	std	Y+5, r25	; 0x05
	minutes = (seconds / 60) % 60;
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	9b 81       	ldd	r25, Y+3	; 0x03
 6cc:	ac 81       	ldd	r26, Y+4	; 0x04
 6ce:	bd 81       	ldd	r27, Y+5	; 0x05
 6d0:	2c e3       	ldi	r18, 0x3C	; 60
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	bc 01       	movw	r22, r24
 6da:	cd 01       	movw	r24, r26
 6dc:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodsi4>
 6e0:	da 01       	movw	r26, r20
 6e2:	c9 01       	movw	r24, r18
 6e4:	2c e3       	ldi	r18, 0x3C	; 60
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	bc 01       	movw	r22, r24
 6ee:	cd 01       	movw	r24, r26
 6f0:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodsi4>
 6f4:	dc 01       	movw	r26, r24
 6f6:	cb 01       	movw	r24, r22
 6f8:	80 93 68 00 	sts	0x0068, r24
	hours = (seconds / 3600) % 3600;
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	9b 81       	ldd	r25, Y+3	; 0x03
 700:	ac 81       	ldd	r26, Y+4	; 0x04
 702:	bd 81       	ldd	r27, Y+5	; 0x05
 704:	20 e1       	ldi	r18, 0x10	; 16
 706:	3e e0       	ldi	r19, 0x0E	; 14
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	50 e0       	ldi	r21, 0x00	; 0
 70c:	bc 01       	movw	r22, r24
 70e:	cd 01       	movw	r24, r26
 710:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodsi4>
 714:	da 01       	movw	r26, r20
 716:	c9 01       	movw	r24, r18
 718:	20 e1       	ldi	r18, 0x10	; 16
 71a:	3e e0       	ldi	r19, 0x0E	; 14
 71c:	40 e0       	ldi	r20, 0x00	; 0
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	bc 01       	movw	r22, r24
 722:	cd 01       	movw	r24, r26
 724:	0e 94 c3 05 	call	0xb86	; 0xb86 <__udivmodsi4>
 728:	dc 01       	movw	r26, r24
 72a:	cb 01       	movw	r24, r22
 72c:	80 93 69 00 	sts	0x0069, r24
	
	uint8_t address = 0;
 730:	19 82       	std	Y+1, r1	; 0x01
	
	PORTA = address;
 732:	8b e3       	ldi	r24, 0x3B	; 59
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	29 81       	ldd	r18, Y+1	; 0x01
 738:	fc 01       	movw	r30, r24
 73a:	20 83       	st	Z, r18
	PORTC = minutes%10 + 48;
 73c:	25 e3       	ldi	r18, 0x35	; 53
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	90 91 68 00 	lds	r25, 0x0068
 744:	8d ec       	ldi	r24, 0xCD	; 205
 746:	98 9f       	mul	r25, r24
 748:	81 2d       	mov	r24, r1
 74a:	11 24       	eor	r1, r1
 74c:	86 95       	lsr	r24
 74e:	86 95       	lsr	r24
 750:	86 95       	lsr	r24
 752:	88 0f       	add	r24, r24
 754:	48 2f       	mov	r20, r24
 756:	44 0f       	add	r20, r20
 758:	44 0f       	add	r20, r20
 75a:	84 0f       	add	r24, r20
 75c:	f9 2f       	mov	r31, r25
 75e:	f8 1b       	sub	r31, r24
 760:	8f 2f       	mov	r24, r31
 762:	80 5d       	subi	r24, 0xD0	; 208
 764:	f9 01       	movw	r30, r18
 766:	80 83       	st	Z, r24
	
	address++;
 768:	89 81       	ldd	r24, Y+1	; 0x01
 76a:	8f 5f       	subi	r24, 0xFF	; 255
 76c:	89 83       	std	Y+1, r24	; 0x01
	
	PORTA = address;
 76e:	8b e3       	ldi	r24, 0x3B	; 59
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	29 81       	ldd	r18, Y+1	; 0x01
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
	PORTC = (minutes/10)%10+48;
 778:	25 e3       	ldi	r18, 0x35	; 53
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	90 91 68 00 	lds	r25, 0x0068
 780:	8d ec       	ldi	r24, 0xCD	; 205
 782:	98 9f       	mul	r25, r24
 784:	81 2d       	mov	r24, r1
 786:	11 24       	eor	r1, r1
 788:	98 2f       	mov	r25, r24
 78a:	96 95       	lsr	r25
 78c:	96 95       	lsr	r25
 78e:	96 95       	lsr	r25
 790:	8d ec       	ldi	r24, 0xCD	; 205
 792:	98 9f       	mul	r25, r24
 794:	81 2d       	mov	r24, r1
 796:	11 24       	eor	r1, r1
 798:	86 95       	lsr	r24
 79a:	86 95       	lsr	r24
 79c:	86 95       	lsr	r24
 79e:	88 0f       	add	r24, r24
 7a0:	48 2f       	mov	r20, r24
 7a2:	44 0f       	add	r20, r20
 7a4:	44 0f       	add	r20, r20
 7a6:	84 0f       	add	r24, r20
 7a8:	f9 2f       	mov	r31, r25
 7aa:	f8 1b       	sub	r31, r24
 7ac:	8f 2f       	mov	r24, r31
 7ae:	80 5d       	subi	r24, 0xD0	; 208
 7b0:	f9 01       	movw	r30, r18
 7b2:	80 83       	st	Z, r24
	
	address++;
 7b4:	89 81       	ldd	r24, Y+1	; 0x01
 7b6:	8f 5f       	subi	r24, 0xFF	; 255
 7b8:	89 83       	std	Y+1, r24	; 0x01
	
	PORTA = address;
 7ba:	8b e3       	ldi	r24, 0x3B	; 59
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	29 81       	ldd	r18, Y+1	; 0x01
 7c0:	fc 01       	movw	r30, r24
 7c2:	20 83       	st	Z, r18
	PORTC = hours%10+48;
 7c4:	25 e3       	ldi	r18, 0x35	; 53
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	90 91 69 00 	lds	r25, 0x0069
 7cc:	8d ec       	ldi	r24, 0xCD	; 205
 7ce:	98 9f       	mul	r25, r24
 7d0:	81 2d       	mov	r24, r1
 7d2:	11 24       	eor	r1, r1
 7d4:	86 95       	lsr	r24
 7d6:	86 95       	lsr	r24
 7d8:	86 95       	lsr	r24
 7da:	88 0f       	add	r24, r24
 7dc:	48 2f       	mov	r20, r24
 7de:	44 0f       	add	r20, r20
 7e0:	44 0f       	add	r20, r20
 7e2:	84 0f       	add	r24, r20
 7e4:	f9 2f       	mov	r31, r25
 7e6:	f8 1b       	sub	r31, r24
 7e8:	8f 2f       	mov	r24, r31
 7ea:	80 5d       	subi	r24, 0xD0	; 208
 7ec:	f9 01       	movw	r30, r18
 7ee:	80 83       	st	Z, r24
	
	address++;
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	8f 5f       	subi	r24, 0xFF	; 255
 7f4:	89 83       	std	Y+1, r24	; 0x01
	
	PORTA = address;
 7f6:	8b e3       	ldi	r24, 0x3B	; 59
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	29 81       	ldd	r18, Y+1	; 0x01
 7fc:	fc 01       	movw	r30, r24
 7fe:	20 83       	st	Z, r18
	PORTC = (hours/10)%10+48;
 800:	25 e3       	ldi	r18, 0x35	; 53
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	90 91 69 00 	lds	r25, 0x0069
 808:	8d ec       	ldi	r24, 0xCD	; 205
 80a:	98 9f       	mul	r25, r24
 80c:	81 2d       	mov	r24, r1
 80e:	11 24       	eor	r1, r1
 810:	98 2f       	mov	r25, r24
 812:	96 95       	lsr	r25
 814:	96 95       	lsr	r25
 816:	96 95       	lsr	r25
 818:	8d ec       	ldi	r24, 0xCD	; 205
 81a:	98 9f       	mul	r25, r24
 81c:	81 2d       	mov	r24, r1
 81e:	11 24       	eor	r1, r1
 820:	86 95       	lsr	r24
 822:	86 95       	lsr	r24
 824:	86 95       	lsr	r24
 826:	88 0f       	add	r24, r24
 828:	48 2f       	mov	r20, r24
 82a:	44 0f       	add	r20, r20
 82c:	44 0f       	add	r20, r20
 82e:	84 0f       	add	r24, r20
 830:	f9 2f       	mov	r31, r25
 832:	f8 1b       	sub	r31, r24
 834:	8f 2f       	mov	r24, r31
 836:	80 5d       	subi	r24, 0xD0	; 208
 838:	f9 01       	movw	r30, r18
 83a:	80 83       	st	Z, r24
}
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	08 95       	ret

0000084c <main>:

int main(void)
{
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62
	DDRD=0xFF;
 854:	81 e3       	ldi	r24, 0x31	; 49
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	2f ef       	ldi	r18, 0xFF	; 255
 85a:	fc 01       	movw	r30, r24
 85c:	20 83       	st	Z, r18
	DDRC=0xFF;
 85e:	84 e3       	ldi	r24, 0x34	; 52
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	2f ef       	ldi	r18, 0xFF	; 255
 864:	fc 01       	movw	r30, r24
 866:	20 83       	st	Z, r18
	DDRA=0xFF;
 868:	8a e3       	ldi	r24, 0x3A	; 58
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	2f ef       	ldi	r18, 0xFF	; 255
 86e:	fc 01       	movw	r30, r24
 870:	20 83       	st	Z, r18
	DDRB=0xFF;
 872:	87 e3       	ldi	r24, 0x37	; 55
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	2f ef       	ldi	r18, 0xFF	; 255
 878:	fc 01       	movw	r30, r24
 87a:	20 83       	st	Z, r18
	PORTC&=0;	//Duomenys
 87c:	85 e3       	ldi	r24, 0x35	; 53
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	fc 01       	movw	r30, r24
 882:	80 81       	ld	r24, Z
 884:	85 e3       	ldi	r24, 0x35	; 53
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	fc 01       	movw	r30, r24
 88a:	10 82       	st	Z, r1
	//PORTD&=0;	//BL prijungtas prie PD7
	PORTA&=0;	//Adresai
 88c:	8b e3       	ldi	r24, 0x3B	; 59
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	fc 01       	movw	r30, r24
 892:	80 81       	ld	r24, Z
 894:	8b e3       	ldi	r24, 0x3B	; 59
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	fc 01       	movw	r30, r24
 89a:	10 82       	st	Z, r1
	PORTB&=0;
 89c:	88 e3       	ldi	r24, 0x38	; 56
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	fc 01       	movw	r30, r24
 8a2:	80 81       	ld	r24, Z
 8a4:	88 e3       	ldi	r24, 0x38	; 56
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	fc 01       	movw	r30, r24
 8aa:	10 82       	st	Z, r1
	
	PORTD |= DISPLAY_POWER;
 8ac:	82 e3       	ldi	r24, 0x32	; 50
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	22 e3       	ldi	r18, 0x32	; 50
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	f9 01       	movw	r30, r18
 8b6:	20 81       	ld	r18, Z
 8b8:	23 67       	ori	r18, 0x73	; 115
 8ba:	fc 01       	movw	r30, r24
 8bc:	20 83       	st	Z, r18
	PORTD |= BLANK_DISPLAY;
 8be:	82 e3       	ldi	r24, 0x32	; 50
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	22 e3       	ldi	r18, 0x32	; 50
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	f9 01       	movw	r30, r18
 8c8:	20 81       	ld	r18, Z
 8ca:	20 68       	ori	r18, 0x80	; 128
 8cc:	fc 01       	movw	r30, r24
 8ce:	20 83       	st	Z, r18
	
	//8bit timer2 nustatymai
	//Set prescale to 1024
	TCCR2 |= (1<<CS22)|(1<<CS21)|(1<<CS20);
 8d0:	85 e4       	ldi	r24, 0x45	; 69
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	25 e4       	ldi	r18, 0x45	; 69
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	f9 01       	movw	r30, r18
 8da:	20 81       	ld	r18, Z
 8dc:	27 60       	ori	r18, 0x07	; 7
 8de:	fc 01       	movw	r30, r24
 8e0:	20 83       	st	Z, r18
	//wait for registers update
	while (ASSR & ((1<<TCN2UB)|(1<<TCR2UB)));
 8e2:	00 00       	nop
 8e4:	82 e4       	ldi	r24, 0x42	; 66
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	fc 01       	movw	r30, r24
 8ea:	80 81       	ld	r24, Z
 8ec:	88 2f       	mov	r24, r24
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	85 70       	andi	r24, 0x05	; 5
 8f2:	99 27       	eor	r25, r25
 8f4:	00 97       	sbiw	r24, 0x00	; 0
 8f6:	b1 f7       	brne	.-20     	; 0x8e4 <main+0x98>
	//clear interrupt flags
	TIFR  = (1<<TOV2);
 8f8:	88 e5       	ldi	r24, 0x58	; 88
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	20 e4       	ldi	r18, 0x40	; 64
 8fe:	fc 01       	movw	r30, r24
 900:	20 83       	st	Z, r18
	//enable TOV2 interrupt
	TIMSK  = (1<<TOIE2);
 902:	89 e5       	ldi	r24, 0x59	; 89
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	20 e4       	ldi	r18, 0x40	; 64
 908:	fc 01       	movw	r30, r24
 90a:	20 83       	st	Z, r18
	
	//Mygtuku interruptai
	MCUCR |= 0x0F; //(ISC00 - ISC11) == 1
 90c:	85 e5       	ldi	r24, 0x55	; 85
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	25 e5       	ldi	r18, 0x55	; 85
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	f9 01       	movw	r30, r18
 916:	20 81       	ld	r18, Z
 918:	2f 60       	ori	r18, 0x0F	; 15
 91a:	fc 01       	movw	r30, r24
 91c:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1) | (1<<INT2);
 91e:	8b e5       	ldi	r24, 0x5B	; 91
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	2b e5       	ldi	r18, 0x5B	; 91
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	f9 01       	movw	r30, r18
 928:	20 81       	ld	r18, Z
 92a:	20 6e       	ori	r18, 0xE0	; 224
 92c:	fc 01       	movw	r30, r24
 92e:	20 83       	st	Z, r18
	MCUCSR |= (1<<ISC2);
 930:	84 e5       	ldi	r24, 0x54	; 84
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	24 e5       	ldi	r18, 0x54	; 84
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	f9 01       	movw	r30, r18
 93a:	20 81       	ld	r18, Z
 93c:	20 64       	ori	r18, 0x40	; 64
 93e:	fc 01       	movw	r30, r24
 940:	20 83       	st	Z, r18
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 942:	85 e5       	ldi	r24, 0x55	; 85
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	25 e5       	ldi	r18, 0x55	; 85
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	f9 01       	movw	r30, r18
 94c:	20 81       	ld	r18, Z
 94e:	2f 74       	andi	r18, 0x4F	; 79
 950:	20 62       	ori	r18, 0x20	; 32
 952:	fc 01       	movw	r30, r24
 954:	20 83       	st	Z, r18
	cli();
 956:	f8 94       	cli
	sleep_enable();
 958:	85 e5       	ldi	r24, 0x55	; 85
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	25 e5       	ldi	r18, 0x55	; 85
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	f9 01       	movw	r30, r18
 962:	20 81       	ld	r18, Z
 964:	20 64       	ori	r18, 0x40	; 64
 966:	fc 01       	movw	r30, r24
 968:	20 83       	st	Z, r18
	sei();
 96a:	78 94       	sei
	while(1)
	{
		
	}
 96c:	ff cf       	rjmp	.-2      	; 0x96c <main+0x120>

0000096e <__cmpsf2>:
 96e:	2f d0       	rcall	.+94     	; 0x9ce <__fp_cmp>
 970:	08 f4       	brcc	.+2      	; 0x974 <__cmpsf2+0x6>
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	08 95       	ret

00000976 <__fixunssfsi>:
 976:	57 d0       	rcall	.+174    	; 0xa26 <__fp_splitA>
 978:	88 f0       	brcs	.+34     	; 0x99c <__fixunssfsi+0x26>
 97a:	9f 57       	subi	r25, 0x7F	; 127
 97c:	90 f0       	brcs	.+36     	; 0x9a2 <__fixunssfsi+0x2c>
 97e:	b9 2f       	mov	r27, r25
 980:	99 27       	eor	r25, r25
 982:	b7 51       	subi	r27, 0x17	; 23
 984:	a0 f0       	brcs	.+40     	; 0x9ae <__fixunssfsi+0x38>
 986:	d1 f0       	breq	.+52     	; 0x9bc <__fixunssfsi+0x46>
 988:	66 0f       	add	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	88 1f       	adc	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	1a f0       	brmi	.+6      	; 0x998 <__fixunssfsi+0x22>
 992:	ba 95       	dec	r27
 994:	c9 f7       	brne	.-14     	; 0x988 <__fixunssfsi+0x12>
 996:	12 c0       	rjmp	.+36     	; 0x9bc <__fixunssfsi+0x46>
 998:	b1 30       	cpi	r27, 0x01	; 1
 99a:	81 f0       	breq	.+32     	; 0x9bc <__fixunssfsi+0x46>
 99c:	5e d0       	rcall	.+188    	; 0xa5a <__fp_zero>
 99e:	b1 e0       	ldi	r27, 0x01	; 1
 9a0:	08 95       	ret
 9a2:	5b c0       	rjmp	.+182    	; 0xa5a <__fp_zero>
 9a4:	67 2f       	mov	r22, r23
 9a6:	78 2f       	mov	r23, r24
 9a8:	88 27       	eor	r24, r24
 9aa:	b8 5f       	subi	r27, 0xF8	; 248
 9ac:	39 f0       	breq	.+14     	; 0x9bc <__fixunssfsi+0x46>
 9ae:	b9 3f       	cpi	r27, 0xF9	; 249
 9b0:	cc f3       	brlt	.-14     	; 0x9a4 <__fixunssfsi+0x2e>
 9b2:	86 95       	lsr	r24
 9b4:	77 95       	ror	r23
 9b6:	67 95       	ror	r22
 9b8:	b3 95       	inc	r27
 9ba:	d9 f7       	brne	.-10     	; 0x9b2 <__fixunssfsi+0x3c>
 9bc:	3e f4       	brtc	.+14     	; 0x9cc <__fixunssfsi+0x56>
 9be:	90 95       	com	r25
 9c0:	80 95       	com	r24
 9c2:	70 95       	com	r23
 9c4:	61 95       	neg	r22
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__fp_cmp>:
 9ce:	99 0f       	add	r25, r25
 9d0:	00 08       	sbc	r0, r0
 9d2:	55 0f       	add	r21, r21
 9d4:	aa 0b       	sbc	r26, r26
 9d6:	e0 e8       	ldi	r30, 0x80	; 128
 9d8:	fe ef       	ldi	r31, 0xFE	; 254
 9da:	16 16       	cp	r1, r22
 9dc:	17 06       	cpc	r1, r23
 9de:	e8 07       	cpc	r30, r24
 9e0:	f9 07       	cpc	r31, r25
 9e2:	c0 f0       	brcs	.+48     	; 0xa14 <__fp_cmp+0x46>
 9e4:	12 16       	cp	r1, r18
 9e6:	13 06       	cpc	r1, r19
 9e8:	e4 07       	cpc	r30, r20
 9ea:	f5 07       	cpc	r31, r21
 9ec:	98 f0       	brcs	.+38     	; 0xa14 <__fp_cmp+0x46>
 9ee:	62 1b       	sub	r22, r18
 9f0:	73 0b       	sbc	r23, r19
 9f2:	84 0b       	sbc	r24, r20
 9f4:	95 0b       	sbc	r25, r21
 9f6:	39 f4       	brne	.+14     	; 0xa06 <__fp_cmp+0x38>
 9f8:	0a 26       	eor	r0, r26
 9fa:	61 f0       	breq	.+24     	; 0xa14 <__fp_cmp+0x46>
 9fc:	23 2b       	or	r18, r19
 9fe:	24 2b       	or	r18, r20
 a00:	25 2b       	or	r18, r21
 a02:	21 f4       	brne	.+8      	; 0xa0c <__fp_cmp+0x3e>
 a04:	08 95       	ret
 a06:	0a 26       	eor	r0, r26
 a08:	09 f4       	brne	.+2      	; 0xa0c <__fp_cmp+0x3e>
 a0a:	a1 40       	sbci	r26, 0x01	; 1
 a0c:	a6 95       	lsr	r26
 a0e:	8f ef       	ldi	r24, 0xFF	; 255
 a10:	81 1d       	adc	r24, r1
 a12:	81 1d       	adc	r24, r1
 a14:	08 95       	ret

00000a16 <__fp_split3>:
 a16:	57 fd       	sbrc	r21, 7
 a18:	90 58       	subi	r25, 0x80	; 128
 a1a:	44 0f       	add	r20, r20
 a1c:	55 1f       	adc	r21, r21
 a1e:	59 f0       	breq	.+22     	; 0xa36 <__fp_splitA+0x10>
 a20:	5f 3f       	cpi	r21, 0xFF	; 255
 a22:	71 f0       	breq	.+28     	; 0xa40 <__fp_splitA+0x1a>
 a24:	47 95       	ror	r20

00000a26 <__fp_splitA>:
 a26:	88 0f       	add	r24, r24
 a28:	97 fb       	bst	r25, 7
 a2a:	99 1f       	adc	r25, r25
 a2c:	61 f0       	breq	.+24     	; 0xa46 <__fp_splitA+0x20>
 a2e:	9f 3f       	cpi	r25, 0xFF	; 255
 a30:	79 f0       	breq	.+30     	; 0xa50 <__fp_splitA+0x2a>
 a32:	87 95       	ror	r24
 a34:	08 95       	ret
 a36:	12 16       	cp	r1, r18
 a38:	13 06       	cpc	r1, r19
 a3a:	14 06       	cpc	r1, r20
 a3c:	55 1f       	adc	r21, r21
 a3e:	f2 cf       	rjmp	.-28     	; 0xa24 <__fp_split3+0xe>
 a40:	46 95       	lsr	r20
 a42:	f1 df       	rcall	.-30     	; 0xa26 <__fp_splitA>
 a44:	08 c0       	rjmp	.+16     	; 0xa56 <__fp_splitA+0x30>
 a46:	16 16       	cp	r1, r22
 a48:	17 06       	cpc	r1, r23
 a4a:	18 06       	cpc	r1, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	f1 cf       	rjmp	.-30     	; 0xa32 <__fp_splitA+0xc>
 a50:	86 95       	lsr	r24
 a52:	71 05       	cpc	r23, r1
 a54:	61 05       	cpc	r22, r1
 a56:	08 94       	sec
 a58:	08 95       	ret

00000a5a <__fp_zero>:
 a5a:	e8 94       	clt

00000a5c <__fp_szero>:
 a5c:	bb 27       	eor	r27, r27
 a5e:	66 27       	eor	r22, r22
 a60:	77 27       	eor	r23, r23
 a62:	cb 01       	movw	r24, r22
 a64:	97 f9       	bld	r25, 7
 a66:	08 95       	ret

00000a68 <__gesf2>:
 a68:	b2 df       	rcall	.-156    	; 0x9ce <__fp_cmp>
 a6a:	08 f4       	brcc	.+2      	; 0xa6e <__gesf2+0x6>
 a6c:	8f ef       	ldi	r24, 0xFF	; 255
 a6e:	08 95       	ret

00000a70 <__mulsf3>:
 a70:	0b d0       	rcall	.+22     	; 0xa88 <__mulsf3x>
 a72:	78 c0       	rjmp	.+240    	; 0xb64 <__fp_round>
 a74:	69 d0       	rcall	.+210    	; 0xb48 <__fp_pscA>
 a76:	28 f0       	brcs	.+10     	; 0xa82 <__mulsf3+0x12>
 a78:	6e d0       	rcall	.+220    	; 0xb56 <__fp_pscB>
 a7a:	18 f0       	brcs	.+6      	; 0xa82 <__mulsf3+0x12>
 a7c:	95 23       	and	r25, r21
 a7e:	09 f0       	breq	.+2      	; 0xa82 <__mulsf3+0x12>
 a80:	5a c0       	rjmp	.+180    	; 0xb36 <__fp_inf>
 a82:	5f c0       	rjmp	.+190    	; 0xb42 <__fp_nan>
 a84:	11 24       	eor	r1, r1
 a86:	ea cf       	rjmp	.-44     	; 0xa5c <__fp_szero>

00000a88 <__mulsf3x>:
 a88:	c6 df       	rcall	.-116    	; 0xa16 <__fp_split3>
 a8a:	a0 f3       	brcs	.-24     	; 0xa74 <__mulsf3+0x4>

00000a8c <__mulsf3_pse>:
 a8c:	95 9f       	mul	r25, r21
 a8e:	d1 f3       	breq	.-12     	; 0xa84 <__mulsf3+0x14>
 a90:	95 0f       	add	r25, r21
 a92:	50 e0       	ldi	r21, 0x00	; 0
 a94:	55 1f       	adc	r21, r21
 a96:	62 9f       	mul	r22, r18
 a98:	f0 01       	movw	r30, r0
 a9a:	72 9f       	mul	r23, r18
 a9c:	bb 27       	eor	r27, r27
 a9e:	f0 0d       	add	r31, r0
 aa0:	b1 1d       	adc	r27, r1
 aa2:	63 9f       	mul	r22, r19
 aa4:	aa 27       	eor	r26, r26
 aa6:	f0 0d       	add	r31, r0
 aa8:	b1 1d       	adc	r27, r1
 aaa:	aa 1f       	adc	r26, r26
 aac:	64 9f       	mul	r22, r20
 aae:	66 27       	eor	r22, r22
 ab0:	b0 0d       	add	r27, r0
 ab2:	a1 1d       	adc	r26, r1
 ab4:	66 1f       	adc	r22, r22
 ab6:	82 9f       	mul	r24, r18
 ab8:	22 27       	eor	r18, r18
 aba:	b0 0d       	add	r27, r0
 abc:	a1 1d       	adc	r26, r1
 abe:	62 1f       	adc	r22, r18
 ac0:	73 9f       	mul	r23, r19
 ac2:	b0 0d       	add	r27, r0
 ac4:	a1 1d       	adc	r26, r1
 ac6:	62 1f       	adc	r22, r18
 ac8:	83 9f       	mul	r24, r19
 aca:	a0 0d       	add	r26, r0
 acc:	61 1d       	adc	r22, r1
 ace:	22 1f       	adc	r18, r18
 ad0:	74 9f       	mul	r23, r20
 ad2:	33 27       	eor	r19, r19
 ad4:	a0 0d       	add	r26, r0
 ad6:	61 1d       	adc	r22, r1
 ad8:	23 1f       	adc	r18, r19
 ada:	84 9f       	mul	r24, r20
 adc:	60 0d       	add	r22, r0
 ade:	21 1d       	adc	r18, r1
 ae0:	82 2f       	mov	r24, r18
 ae2:	76 2f       	mov	r23, r22
 ae4:	6a 2f       	mov	r22, r26
 ae6:	11 24       	eor	r1, r1
 ae8:	9f 57       	subi	r25, 0x7F	; 127
 aea:	50 40       	sbci	r21, 0x00	; 0
 aec:	8a f0       	brmi	.+34     	; 0xb10 <__mulsf3_pse+0x84>
 aee:	e1 f0       	breq	.+56     	; 0xb28 <__mulsf3_pse+0x9c>
 af0:	88 23       	and	r24, r24
 af2:	4a f0       	brmi	.+18     	; 0xb06 <__mulsf3_pse+0x7a>
 af4:	ee 0f       	add	r30, r30
 af6:	ff 1f       	adc	r31, r31
 af8:	bb 1f       	adc	r27, r27
 afa:	66 1f       	adc	r22, r22
 afc:	77 1f       	adc	r23, r23
 afe:	88 1f       	adc	r24, r24
 b00:	91 50       	subi	r25, 0x01	; 1
 b02:	50 40       	sbci	r21, 0x00	; 0
 b04:	a9 f7       	brne	.-22     	; 0xaf0 <__mulsf3_pse+0x64>
 b06:	9e 3f       	cpi	r25, 0xFE	; 254
 b08:	51 05       	cpc	r21, r1
 b0a:	70 f0       	brcs	.+28     	; 0xb28 <__mulsf3_pse+0x9c>
 b0c:	14 c0       	rjmp	.+40     	; 0xb36 <__fp_inf>
 b0e:	a6 cf       	rjmp	.-180    	; 0xa5c <__fp_szero>
 b10:	5f 3f       	cpi	r21, 0xFF	; 255
 b12:	ec f3       	brlt	.-6      	; 0xb0e <__mulsf3_pse+0x82>
 b14:	98 3e       	cpi	r25, 0xE8	; 232
 b16:	dc f3       	brlt	.-10     	; 0xb0e <__mulsf3_pse+0x82>
 b18:	86 95       	lsr	r24
 b1a:	77 95       	ror	r23
 b1c:	67 95       	ror	r22
 b1e:	b7 95       	ror	r27
 b20:	f7 95       	ror	r31
 b22:	e7 95       	ror	r30
 b24:	9f 5f       	subi	r25, 0xFF	; 255
 b26:	c1 f7       	brne	.-16     	; 0xb18 <__mulsf3_pse+0x8c>
 b28:	fe 2b       	or	r31, r30
 b2a:	88 0f       	add	r24, r24
 b2c:	91 1d       	adc	r25, r1
 b2e:	96 95       	lsr	r25
 b30:	87 95       	ror	r24
 b32:	97 f9       	bld	r25, 7
 b34:	08 95       	ret

00000b36 <__fp_inf>:
 b36:	97 f9       	bld	r25, 7
 b38:	9f 67       	ori	r25, 0x7F	; 127
 b3a:	80 e8       	ldi	r24, 0x80	; 128
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	08 95       	ret

00000b42 <__fp_nan>:
 b42:	9f ef       	ldi	r25, 0xFF	; 255
 b44:	80 ec       	ldi	r24, 0xC0	; 192
 b46:	08 95       	ret

00000b48 <__fp_pscA>:
 b48:	00 24       	eor	r0, r0
 b4a:	0a 94       	dec	r0
 b4c:	16 16       	cp	r1, r22
 b4e:	17 06       	cpc	r1, r23
 b50:	18 06       	cpc	r1, r24
 b52:	09 06       	cpc	r0, r25
 b54:	08 95       	ret

00000b56 <__fp_pscB>:
 b56:	00 24       	eor	r0, r0
 b58:	0a 94       	dec	r0
 b5a:	12 16       	cp	r1, r18
 b5c:	13 06       	cpc	r1, r19
 b5e:	14 06       	cpc	r1, r20
 b60:	05 06       	cpc	r0, r21
 b62:	08 95       	ret

00000b64 <__fp_round>:
 b64:	09 2e       	mov	r0, r25
 b66:	03 94       	inc	r0
 b68:	00 0c       	add	r0, r0
 b6a:	11 f4       	brne	.+4      	; 0xb70 <__fp_round+0xc>
 b6c:	88 23       	and	r24, r24
 b6e:	52 f0       	brmi	.+20     	; 0xb84 <__fp_round+0x20>
 b70:	bb 0f       	add	r27, r27
 b72:	40 f4       	brcc	.+16     	; 0xb84 <__fp_round+0x20>
 b74:	bf 2b       	or	r27, r31
 b76:	11 f4       	brne	.+4      	; 0xb7c <__fp_round+0x18>
 b78:	60 ff       	sbrs	r22, 0
 b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__fp_round+0x20>
 b7c:	6f 5f       	subi	r22, 0xFF	; 255
 b7e:	7f 4f       	sbci	r23, 0xFF	; 255
 b80:	8f 4f       	sbci	r24, 0xFF	; 255
 b82:	9f 4f       	sbci	r25, 0xFF	; 255
 b84:	08 95       	ret

00000b86 <__udivmodsi4>:
 b86:	a1 e2       	ldi	r26, 0x21	; 33
 b88:	1a 2e       	mov	r1, r26
 b8a:	aa 1b       	sub	r26, r26
 b8c:	bb 1b       	sub	r27, r27
 b8e:	fd 01       	movw	r30, r26
 b90:	0d c0       	rjmp	.+26     	; 0xbac <__udivmodsi4_ep>

00000b92 <__udivmodsi4_loop>:
 b92:	aa 1f       	adc	r26, r26
 b94:	bb 1f       	adc	r27, r27
 b96:	ee 1f       	adc	r30, r30
 b98:	ff 1f       	adc	r31, r31
 b9a:	a2 17       	cp	r26, r18
 b9c:	b3 07       	cpc	r27, r19
 b9e:	e4 07       	cpc	r30, r20
 ba0:	f5 07       	cpc	r31, r21
 ba2:	20 f0       	brcs	.+8      	; 0xbac <__udivmodsi4_ep>
 ba4:	a2 1b       	sub	r26, r18
 ba6:	b3 0b       	sbc	r27, r19
 ba8:	e4 0b       	sbc	r30, r20
 baa:	f5 0b       	sbc	r31, r21

00000bac <__udivmodsi4_ep>:
 bac:	66 1f       	adc	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	1a 94       	dec	r1
 bb6:	69 f7       	brne	.-38     	; 0xb92 <__udivmodsi4_loop>
 bb8:	60 95       	com	r22
 bba:	70 95       	com	r23
 bbc:	80 95       	com	r24
 bbe:	90 95       	com	r25
 bc0:	9b 01       	movw	r18, r22
 bc2:	ac 01       	movw	r20, r24
 bc4:	bd 01       	movw	r22, r26
 bc6:	cf 01       	movw	r24, r30
 bc8:	08 95       	ret

00000bca <_exit>:
 bca:	f8 94       	cli

00000bcc <__stop_program>:
 bcc:	ff cf       	rjmp	.-2      	; 0xbcc <__stop_program>
